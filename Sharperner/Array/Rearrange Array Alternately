//User function Template for javascript

/**
 * @param {number[]} arr
 * @param {number} n
 */
 
class Solution {
    //Function to rearrange  the array elements alternately.
    rearrange(arr, n){
        // code here
        for(let i=0; i<n; i +=2){
            let highest = arr[n-1]
            for(let j=n-1; j>i; j--){
                arr[j] = arr[j-1]
            }
            
            arr[i] = highest
        }
    }
}

Time Complexity -> O(NlogN)
Space Complexity = O(1)

//User function Template for javascript

/**
 * @param {number[]} arr
 * @param {number} n
 */
 
class Solution {
    //Function to rearrange  the array elements alternately.
    rearrange(arr, n){
        // code here
        const ans = []
        for(let i=0; i<n/2; i++){
            ans.push(arr[n-1-i], arr[i]);
        }
        
        return ans;
    }
}

Time Complexity -> O(N);
Space Complexity -> O(N);

class Solution {
    //Function to rearrange  the array elements alternately.
    rearrange(arr, n){
        let maxIdx = n-1;
        let minIdx = 0;
        const maxElement = arr[maxIdx] + 1;
        
        for(let i=0; i<n; i++){
            if((i&1) === 0) {
                arr[i] = (arr[maxIdx] % maxElement) * maxElement + arr[i];
                maxIdx--;
            } else { 
                arr[i] = (arr[minIdx]% maxElement) * maxElement + arr[i];
                minIdx++;
            } 
        }
        
        
        for(let i=0; i<n; i++){
            arr[i] = parseInt(arr[i]/maxElement);
        }
    }
}

Time Complexity -> O(N);
Space Complexity -> O(1);
