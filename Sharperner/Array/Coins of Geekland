/**
 * @param {number[][]} arr
 * @param {number} n
 * @param {number} k
 * @returns {number}
*/

class Solution{
    Maximum_Sum(arr,n, k){
       let maxSum =Number.MIN_SAFE_INTEGER;
       
       for(let row = 0; row <=n-k; row++) {
           for(let col = 0; col<=n-k; col++) {
               let sum = 0;
               for(let i=row; i<row+k; i++) {
                   for(let j=col; j<col+k; j++) {
                       sum += arr[i][j];
                   }
               }
               
               maxSum = Math.max(maxSum, sum);
           }
       }
       
       return maxSum;
    }
}

Time Complexity -->O(N**2 * N**2)
Space Complexity --> O(1);

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------Alternate Way (Prefix SUm)--------------------------------------------------------------------------------




class Solution{
    Maximum_Sum(mat,n, k){
       
        for(let i=0; i<n; i++) {
            for(let j=0; j<n; j++) {
                if((i-1)>=0)
                    mat[i][j] += mat[i-1][j];
                if((j-1) >=0)
                    mat[i][j] += mat[i][j-1];
                if((i-1)>=0 && (j-1) >=0)
                    mat[i][j] -= mat[i-1][j-1];
           }
       }
       
       let maxSum = Number.MIN_SAFE_INTEGER;
       
       for(let i=0; i<=n-k; i++) {
           for(let j=0; j<=n-k; j++) {
               let sum;
               if(i==0 && j==0) {
                   sum = mat[i+k-1][j+k-1];
               }else if(i==0 && j>0){
                   sum = mat[i+k-1][j+k-1] - mat[i+k-1][j-1];
               }else if(i>0 && j===0){
                   sum = mat[i+k-1][j+k-1] - mat[i-1][j+k-1];
               }else{
                   sum = mat[i+k-1][j+k-1] - mat[i-1][j+k-1]-mat[i+k-1][j-1] + mat[i-1][j-1];
               }
               
               maxSum = Math.max(maxSum, sum);
           }
           
       }
       
       return maxSum;
    }
}

Time Complexity -> O(N**2);
Space Complexity --> O(1);
