
/**
 * @param {number[]} arr1
 * @param {number} N
 * @param {number} X
 * @returns {number[]}
*/

class Solution {
    
    first(arr,target) {
        const n = arr.length
        let low = 0;
        let high = n-1;
        
        let first = -1;
        
        while(low<=high) {
            let mid = low + Math.floor((high - low) /2);
            
            if(arr[mid] ===target) {
                first = mid;
                high = mid-1;
            }else if(arr[mid] > target) {
                high = mid-1;
            }else {
                low = mid+1;
            }
        }
        
        return first
    }
    
    last(arr,target) {
        const n = arr.length
        let low = 0;
        let high = n-1;
        
        let last = -1;
        
        while(low<=high) {
            let mid = low + Math.floor((high - low) /2);
            
            if(arr[mid] ===target) {
                last = mid;
                low = mid+1;
            }else if(arr[mid] > target) {
                high = mid-1;
            }else {
                low = mid+1;
            }
        }
        
        return last;
    }
    
    firstAndLast(arr, N, X)
    {    
        let firstOccr = this.first(arr,X)
        let lastOccr = this.last(arr,X)
        
        if(firstOccr !== -1  && lastOccr !== -1) {
            return [firstOccr, lastOccr]
        }
        return [-1]
    }
}
