//{ Driver Code Starts
//Initial Template for javascript

"use strict";

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let inputString = "";
let currentLine = 0;



process.stdin.on("data", (inputStdin) => {
  inputString += inputStdin;
});

process.stdin.on("end", (_) => {
  inputString = inputString
    .trim()
    .split("\n")
    .map((string) => {
      return string.trim();
    });

  main();
});

function readLine() {
  return inputString[currentLine++];
}


function main() {
  let t = parseInt(readLine());
  let i = 0;
 
  for (; i < t; i++) {
    let [R,C] = readLine().trim().split(" ").map((x) => parseInt(x));
    let M = [];
    for(let j = 0;j<R;j++){
      let inputLine = readLine().trim().split(" ").map((x)=>parseInt(x));
      M.push(inputLine);
    }
    let obj = new Solution();
    let res = obj.maximumSumRectangle(R,C,M);
    console.log(res);
  }

}
// } Driver Code Ends


//User function Template for javascript

/**
 * @param {number} R
 * @param {number} C
 * @param {number[]} M
 * @return {number} 
*/

class Solution {
    kadane(arr){
        let max= Number.MIN_SAFE_INTEGER;
        let sum = 0;
        
        for(let i=0; i<arr.length; i++){
            sum += arr[i];
            
            if(sum > max) max = sum;
            if(sum<0) sum = 0
        }
        
        return max;
    }
    maximumSumRectangle(R,C,M){
        //code here
        let max= Number.MIN_SAFE_INTEGER;
        
        for(let i=0; i<R;i++){
            const colSum = new Array(C).fill(0);
            
            for(let k=i; k<R; k++){
                for(let j=0; j<C; j++){
                    colSum[j] += M[k][j]
                }
                
                max = Math.max(max,this.kadane(colSum))
            }
            
        }
        
        return max
        
    }
}
